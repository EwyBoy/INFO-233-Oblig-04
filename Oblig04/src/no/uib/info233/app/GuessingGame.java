package no.uib.info233.app;import no.uib.info233.tree.LinkedDecisionTree;import no.uib.info233.tree.DecisionTree;/** * A program that plays a guessing game using yes or no questions. *  * @author Frank M. Carrano * @author Timothy M. Henry * @version 4.0 */public class GuessingGame {    private DecisionTree<String> tree;    public GuessingGame(String question, String noAnswer, String yesAnswer) {        LinkedDecisionTree<String> no = new LinkedDecisionTree<>(noAnswer);        LinkedDecisionTree<String> yes = new LinkedDecisionTree<>(yesAnswer);        tree = new LinkedDecisionTree<>(question, no, yes);    }    public void play() {        tree.resetCurrentNode(); // Initialize current node to root        while (!tree.isAnswer()) {            // Ask current question            System.out.println(tree.getCurrentData());            if (Client.isUserResponseYes()) {                tree.advanceToYes();            } else {                tree.advanceToNo();            }        }        assert tree.isAnswer(); // Assertion: Leaf is reached        // Make guess        System.out.println("My guess is " + tree.getCurrentData() + ". Am I right?");        if (Client.isUserResponseYes()) {            System.out.println("I win.");        } else {            learn();        }    }    // < Implementation is the solution to Project 2 in Chapter 24. >    // Responds to the user when this program makes a wrong guess and    // extends the decision tree so that this guess is not made again.    private void learn() {        System.out.println("I give up; what are you thinking of? ");        String correctAnswer = Client.getUserResponse();        String currentAnswer = tree.getCurrentData();        System.out.println(                "Give me a question whose answer is yes for " + correctAnswer + " but no for " + currentAnswer);        String newQuestion = Client.getUserResponse();        extendTree(newQuestion, currentAnswer, correctAnswer);    }    // Replaces the current node, which must be a leaf,    // with a question and two answers.    // Parameters:    // question A question ending in '?'.    // noAnswer The response when the answer to the question is 'no'.    // yesAnswer The response when the answer to the question is 'yes'.    private void extendTree(String question, String noAnswer, String yesAnswer) {        tree.setCurrentData(question);        tree.setResponses(noAnswer, yesAnswer);    }}