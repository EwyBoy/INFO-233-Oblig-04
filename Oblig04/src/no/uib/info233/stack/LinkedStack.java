package no.uib.info233.stack;import java.util.EmptyStackException;/** * A class of stacks whose entries are stored in a chain of nodes. *  * @author Frank M. Carrano * @author Timothy M. Henry * @version 4.0 */public final class LinkedStack<T> implements Stack<T> {    private Node topNode; // References the first node in the chain    public LinkedStack() {        topNode = null;    }    public void push(T newEntry) {        topNode = new Node(newEntry, topNode);//		Node newNode = new Node(newEntry, topNode);//		topNode = newNode;    }    public T peek() {        if (isEmpty()) {            throw new EmptyStackException();        } else {            return topNode.getData();        }    }    public T pop() {        T top = peek(); // Might throw EmptyStackException        assert (topNode != null);        topNode = topNode.getNextNode();        return top;    }    /*     * // Question 1, Chapter 6: Does not call peek public T pop() { if (isEmpty())     * throw new EmptyStackException(); else { assert (topNode != null); top =     * topNode.getData(); topNode = topNode.getNextNode(); }     *      * return top; }     */    public boolean isEmpty() {        return topNode == null;    }    public void clear() {        topNode = null; // Causes deallocation of nodes in the chain    }    private class Node {        private T data; // Entry in stack        private Node next; // Link to next node        private Node(T dataPortion) {            this(dataPortion, null);        }        private Node(T dataPortion, Node linkPortion) {            data = dataPortion;            next = linkPortion;        }        private T getData() {            return data;        }        private void setData(T newData) {            data = newData;        }        private Node getNextNode() {            return next;        }        private void setNextNode(Node nextNode) {            next = nextNode;        }    }}