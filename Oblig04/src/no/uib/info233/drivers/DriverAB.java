package no.uib.info233.drivers;import java.util.Iterator;import no.uib.info233.tree.ArrayBinaryTree;import no.uib.info233.tree.BinaryTree;/** * A driver that demonstrates the class ArrayBinaryTree. *  * @author Charles Hoot * @author Frank M. Carrano * @author Timothy M. Henry * @version 4.2 */public class DriverAB {    public static void main(String args[]) {        BinaryTree<String> leaf1 = new ArrayBinaryTree<>();        BinaryTree<String> leaf2 = new ArrayBinaryTree<>();        BinaryTree<String> leaf3 = new ArrayBinaryTree<>();        BinaryTree<String> leaf4 = new ArrayBinaryTree<>();        BinaryTree<String> leaf5 = new ArrayBinaryTree<>();        BinaryTree<String> leaf6 = new ArrayBinaryTree<>();        BinaryTree<String> lev3int1 = new ArrayBinaryTree<>();        BinaryTree<String> lev3int2 = new ArrayBinaryTree<>();        BinaryTree<String> lev3int3 = new ArrayBinaryTree<>();        BinaryTree<String> lev3int4 = new ArrayBinaryTree<>();        BinaryTree<String> lev2int1 = new ArrayBinaryTree<>();        BinaryTree<String> lev2int2 = new ArrayBinaryTree<>();        BinaryTree<String> lev1int1 = new ArrayBinaryTree<>();        leaf1.setTree("A", null, null);        leaf2.setTree("B", null, null);        leaf3.setTree("C", null, null);        leaf4.setTree("D", null, null);        leaf5.setTree("E", null, null);        leaf6.setTree("F", null, null);        lev3int1.setTree("G", null, leaf1);        lev3int2.setTree("H", leaf2, null);        lev3int3.setTree("I", leaf3, leaf4);        lev3int4.setTree("J", leaf5, leaf6);        lev2int1.setTree("K", lev3int1, lev3int2);        lev2int2.setTree("L", lev3int3, lev3int4);        lev1int1.setTree("M", lev2int1, lev2int2);        System.out.println("\nThe tree has " + lev1int1.getNumberOfNodes() + " nodes (should be 13)"                + " and is of height " + lev1int1.getHeight() + " (should be 4)");        System.out.println("\n\nInorder traversal:");        System.out.println("Expected: G  A  K  B  H  M  C  I  D  L  E  J  F");        System.out.print("Actual:   ");        Iterator<String> iter = lev1int1.inorderIterator();        while (iter.hasNext()) {            System.out.print(iter.next() + "  ");        }        System.out.println();        System.out.println("\nPreorder traversal:");        System.out.println("Expected: M  K  G  A  H  B  L  I  C  D  J  E  F");        System.out.print("Actual:   ");        iter = lev1int1.preorderIterator();        while (iter.hasNext()) {            System.out.print(iter.next() + "  ");        }        System.out.println();        System.out.println("\nPostorder traversal:");        System.out.println("Expected: A  G  B  H  K  C  D  I  E  F  J  L  M");        System.out.print("Actual:   ");        iter = lev1int1.postorderIterator();        while (iter.hasNext()) {            System.out.print(iter.next() + "  ");        }        System.out.println();        System.out.println("\nLevel order traversal:");        System.out.println("Expected: M  K  L  G  H  I  J  A  B  C  D  E  F");        System.out.print("Actual:   ");        iter = lev1int1.levelorderIterator();        while (iter.hasNext()) {            System.out.print(iter.next() + "  ");        }        System.out.println();    }}/* *  *  * The tree has 13 nodes (should be 13) and is of height 4 (should be 4) *  *  * Inorder traversal: Expected: G A K B H M C I D L E J F Actual: G A K B H M C * I D L E J F *  * Preorder traversal: Expected: M K G A H B L I C D J E F Actual: M K G A H B L * I C D J E F *  * Postorder traversal: Expected: A G B H K C D I E F J L M Actual: A G B H K C * D I E F J L M *  * Level order traversal: Expected: M K L G H I J A B C D E F Actual: M K L G H * I J A B C D E F */