package no.uib.info233.drivers;import java.util.Iterator;import no.uib.info233.tree.LinkedExpressionTree;/** * A driver that demonstrates the class ExpressionTree. *  * @author Frank M. Carrano * @author Timothy M. Henry * @version 4.2 */public class DriverET {    public static void main(String[] args) {        // Build expression tree for a * (b c * d) / e, as pictured in Figure 23-15d        LinkedExpressionTree a = new LinkedExpressionTree();        a.setTree("a");        LinkedExpressionTree b = new LinkedExpressionTree();        b.setTree("b");        LinkedExpressionTree c = new LinkedExpressionTree();        c.setTree("c");        LinkedExpressionTree d = new LinkedExpressionTree();        d.setTree("d");        LinkedExpressionTree e = new LinkedExpressionTree();        e.setTree("e");        // Building from bottom up        LinkedExpressionTree cTimes = new LinkedExpressionTree();        cTimes.setTree("*", c, d);        LinkedExpressionTree bPlus = new LinkedExpressionTree();        bPlus.setTree("+", b, cTimes);        LinkedExpressionTree aTimes = new LinkedExpressionTree();        aTimes.setTree("*", a, bPlus);        LinkedExpressionTree myTree = new LinkedExpressionTree();        myTree.setTree("/", aTimes, e);        testPreorder(myTree, "/ * a + b * c d e");        testPostorder(myTree, "a b c d * + * e /");        System.out.println("evaluate() returns " + myTree.evaluate() + " (should be 23)");        System.out.println("Done.");    }    public static void testPreorder(LinkedExpressionTree tree, String answer) {        System.out.println("\nPreorder:");        System.out.println(answer + "  Expected");        Iterator<String> preorder = tree.preorderIterator();        while (preorder.hasNext()) {            System.out.print(preorder.next() + " ");        }        System.out.println(" Actual\n---------------");    } // end testPreorder    public static void testPostorder(LinkedExpressionTree tree, String answer) {        System.out.println("\nPostOrder:");        System.out.println(answer + "  Expected");        Iterator<String> postorder = tree.postorderIterator();        while (postorder.hasNext()) {            System.out.print(postorder.next() + " ");        }        System.out.println(" Actual\n---------------");    }}/* *  *  * Preorder: / * a + b * c d e Expected / * a + b * c d e Actual --------------- *  * PostOrder: a b c d * + * e / Expected a b c d * + * e / Actual * --------------- evaluate() returns 23.0 (should be 23) Done. *//* * Figure. 23-14d looks like this: *  * / / \ e / \ a + / \ b * / \ c d */