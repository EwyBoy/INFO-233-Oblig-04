package no.uib.info233.tree;/** * A class that represents nodes in a binary tree (clonable version). *  * @author Frank M. Carrano * @author Timothy M. Henry * @version 4.2 */public class CloneableBinaryTreeNode<T> implements Cloneable {    private T data;    private CloneableBinaryTreeNode<T> left; // Reference to left child    private CloneableBinaryTreeNode<T> right; // Reference to right child    public CloneableBinaryTreeNode() {        this(null); // Call next constructor    }    public CloneableBinaryTreeNode(T dataPortion) {        this(dataPortion, null, null); // Call next constructor    }    public CloneableBinaryTreeNode(T dataPortion, CloneableBinaryTreeNode<T> leftChild, CloneableBinaryTreeNode<T> rightChild) {        data = dataPortion;        left = leftChild;        right = rightChild;    }    /**     * Retrieves the data portion of this node.     *      * @return The object in the data portion of the node.     */    public T getData() {        return data;    }    /**     * Sets the data portion of this node.     *      * @param newData The data object.     */    public void setData(T newData) {        data = newData;    }    /**     * Retrieves the left child of this node.     *      * @return The node's left child.     */    public CloneableBinaryTreeNode<T> getLeftChild() {        return left;    }    /**     * Retrieves the right child of this node.     *      * @return The node's right child.     */    public CloneableBinaryTreeNode<T> getRightChild() {        return right;    }    /**     * Sets this node's left child to a given node.     *      * @param leftChild A node that will be the left child.     */    public void setLeftChild(CloneableBinaryTreeNode<T> leftChild) {        left = leftChild;    }    /**     * Sets this node's right child to a given node.     *      * @param rightChild A node that will be the right child.     */    public void setRightChild(CloneableBinaryTreeNode<T> rightChild) {        right = rightChild;    }    /**     * Detects whether this node has a left child.     *      * @return True if the node has a left child.     */    public boolean hasLeftChild() {        return left != null;    }    /**     * Detects whether this node has a right child.     *      * @return True if the node has a right child.     */    public boolean hasRightChild() {        return right != null;    }    /**     * Detects whether this node is a leaf.     *      * @return True if the node is a leaf.     */    public boolean isLeaf() {        return (left == null) && (right == null);    }    /**     * Counts the nodes in the subtree rooted at this node.     *      * @return The number of nodes in the subtree rooted at this node.     */    public int getNumberOfNodes() {        int leftNumber = 0;        int rightNumber = 0;        if (left != null) {            leftNumber = left.getNumberOfNodes();        }        if (right != null) {            rightNumber = right.getNumberOfNodes();        }        return 1 + leftNumber + rightNumber;    }    /**     * Computes the height of the subtree rooted at this node.     *      * @return The height of the subtree rooted at this node.     */    public int getHeight() {        return getHeight(this); // Call private getHeight    }    private int getHeight(CloneableBinaryTreeNode<T> node) {        int height = 0;        if (node != null) {            height = 1 + Math.max(getHeight(node.left), getHeight(node.right));        }        return height;    }    /**     * Makes a clone of this node and its subtrees.     *      * @return The clone of the subtree rooted at this node.     */    @Override    public Object clone() {        CloneableBinaryTreeNode<T> theCopy = null;        try {            @SuppressWarnings("unchecked")            CloneableBinaryTreeNode<T> temp = (CloneableBinaryTreeNode<T>) super.clone();            theCopy = temp;        } catch (CloneNotSupportedException e) {            throw new Error("CloneableBinaryNode cannot clone: " + e.toString());        }        // theCopy.data = (T)data.clone();        if (left != null) {            @SuppressWarnings("unchecked")            CloneableBinaryTreeNode<T> temp = (CloneableBinaryTreeNode<T>) left.clone();            theCopy.left = temp;        }        if (right != null) {            @SuppressWarnings("unchecked")            CloneableBinaryTreeNode<T> temp = (CloneableBinaryTreeNode<T>) right.clone();            theCopy.right = temp;        }        return theCopy;    }}