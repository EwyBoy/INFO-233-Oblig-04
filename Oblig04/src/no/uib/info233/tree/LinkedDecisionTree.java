package no.uib.info233.tree;/** * A class that implements a decision tree by extending BinaryTree. *  * @author Frank M. Carrano * @author Timothy M. Henry * @version 4.0 */public class LinkedDecisionTree<T> extends LinkedBinaryTree<T> implements DecisionTree<T> {    private BinaryTreeNode<T> currentNode; // Tracks where we are in the tree    public LinkedDecisionTree() {        super();    }    public LinkedDecisionTree(T rootData) {        super(rootData);    }    public LinkedDecisionTree(T rootData, LinkedDecisionTree<T> leftTree, LinkedDecisionTree<T> rightTree) {        super(rootData, leftTree, rightTree);    }    @Override    public T getCurrentData() {        if (currentNode != null) {            return currentNode.getData();        } else {            return null;        }    }    @Override    public void setCurrentData(T newData) {        if (currentNode != null) {            currentNode.setData(newData);        } else {            throw new NullPointerException();        }    }    @Override    public void setResponses(T responseForNo, T responseForYes) {        if (currentNode == null) {            throw new NullPointerException();        } else if (currentNode.hasLeftChild()) {            BinaryTreeNode<T> leftChild = currentNode.getLeftChild();            leftChild.setData(responseForNo);        } else {            BinaryTreeNode<T> newLeftChild = new BinaryTreeNode<>(responseForNo);            currentNode.setLeftChild(newLeftChild);        }        if (currentNode.hasRightChild()) {            BinaryTreeNode<T> rightChild = currentNode.getRightChild();            rightChild.setData(responseForYes);        } else {            BinaryTreeNode<T> newRightChild = new BinaryTreeNode<>(responseForYes);            currentNode.setRightChild(newRightChild);        }    }    @Override    public Boolean isAnswer() {        if (currentNode != null) {            return currentNode.isLeaf();        } else {            return false;        }    }    @Override    public void advanceToNo() {        if (currentNode == null) {            throw new NullPointerException();        } else {            currentNode = currentNode.getLeftChild();        }    }    @Override    public void advanceToYes() {        if (currentNode == null) {            throw new NullPointerException();        } else {            currentNode = currentNode.getRightChild();        }    }    @Override    public void resetCurrentNode() {        currentNode = getRootNode();    }    protected BinaryTreeNode<T> getCurrentNode() {        return currentNode;    }}