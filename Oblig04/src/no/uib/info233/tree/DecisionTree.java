package no.uib.info233.tree;/** * An interface for a decision tree. *  * @author Frank M. Carrano * @author Timothy M. Henry * @author Atle Geitung * @version 4.0.uib */public interface DecisionTree<T> extends BinaryTree<T> {    /**     * Gets the data in the current node.     *      * @return The data object in the current node, or null if the current node is     *         null.     */    T getCurrentData();    /**     * Sets the data in the current node. Precondition: The current node is not     * null.     *      * @param data The new data object.     */    void setCurrentData(T data);    /**     * Sets the data in the children of the current node, creating them if they do     * not exist. Precondition: The current node is not null.     *      * @param responseForNo  The new data object for the left child.     * @param responseForYes The new data object for the right child.     */    void setResponses(T responseForNo, T responseForYes);    /**     * Sees whether the current node contains an answer.     *      * @return True if the current node is a leaf, or false if it is a nonleaf.     */    Boolean isAnswer();    /**     * Sets the current node to its left child. If the child does not exist, sets     * the current node to null. Precondition: The current node is not null.     */    void advanceToNo();    /**     * Sets the current node to its right child. If the child does not exist, sets     * the current node to null. Precondition: The current node is not null.     */    void advanceToYes();    /**     * Makes the root of the tree the current node.      */    void resetCurrentNode();}