package no.uib.info233.queue;/** * A class that implements the ADT queue by using a chain of nodes that has both * head and tail references. *  * @author Frank M. Carrano * @author Timothy M. Henry * @version 4.0 */public final class LinkedQueue<T> implements Queue<T> {    private Node firstNode; // References node at front of queue    private Node lastNode; // References node at back of queue    public LinkedQueue() {        firstNode = null;        lastNode = null;    }    @Override    public void enqueue(T newEntry) {        Node newNode = new Node(newEntry, null);        if (isEmpty()) {            firstNode = newNode;        } else {            lastNode.setNextNode(newNode);        }        lastNode = newNode;    }    @Override    public T getFront() {        if (isEmpty()) {            throw new EmptyQueueException();        } else {            return firstNode.getData();        }    }    @Override    public T dequeue() {        T front = getFront(); // Might throw EmptyQueueException        assert firstNode != null;        firstNode.setData(null);        firstNode = firstNode.getNextNode();        if (firstNode == null) {            lastNode = null;        }        return front;    }    @Override    public boolean isEmpty() {        return (firstNode == null) && (lastNode == null);    }    @Override    public void clear() {        firstNode = null;        lastNode = null;    }    private class Node {        private T data; // Entry in queue        private Node next; // Link to next node        private Node(T dataPortion) {            data = dataPortion;            next = null;        }        private Node(T dataPortion, Node linkPortion) {            data = dataPortion;            next = linkPortion;        }        private T getData() {            return data;        }        private void setData(T newData) {            data = newData;        }        private Node getNextNode() {            return next;        }        private void setNextNode(Node nextNode) {            next = nextNode;        }    }}